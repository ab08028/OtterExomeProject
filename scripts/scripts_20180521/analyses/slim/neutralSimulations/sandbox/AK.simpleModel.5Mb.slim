// set up a simple neutral simulation
// added sea otter mutation rate 8.64e-09 (from genome paper)
initialize() {
	initializeMutationRate(8.64e-9);
	
	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);

	// initialize 1kb block
	initializeGenomicElementType("g1", m1, 1.0);
	// a 6Mb "chromosome" that's going to be made up of 6000 independent 1kb blocks
	// this represents my neutral sequence
	initializeGenomicElement(g1, 0, 6000000);

// figured out a way for recomb to be 0.5 between blocks, but 1e-08 within blocks
// so that they aren't actually linked; simulating 6000 independent blocks
	//initializeRecombinationRate(1e-8);
	// this sets up rates that alternate between 1e-08 and 0.5
	// and ends that are in pattern 999 1000 1999 2000 2999 ...
	// so that the pattern is that r is 1e-8 for 0-999, then 0.5 between 999 and 1000 (independent block), then is 1e-8 through next block, and so on.
	// making 5000 independent blocks.
	rates=c(rep(c(1e-8,0.5),6000));
	ends=NULL;
	for (index in 0:5999)
	{
	ends=c(ends,index*1000+999,index*1000+999+1);
	}
	initializeRecombinationRate(rates,ends);

}

// create a population of 4000 individuals
1 {
	sim.addSubpop("p1", 4000);
}

// burn in for 10N generations (4000* 10 = 40,000); going up to 5000 for good measure
// then crash to 30 individuals
50000 {
	p1.setSubpopulationSize(30);
}

// run for 10 more generations and then output the vcf for 7 individuals sampled w/out replacement
50010 late() {
	p1.outputVCFSample(7, F,filePath="/Users/annabelbeichman/Documents/UCLA/Otters/OtterExomeProject/scripts/scripts_20180521/analyses/slim/sandbox/AK.model.dummy.vcf");
}



