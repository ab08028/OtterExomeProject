sfs <- read.table(paste(data.dir,pop,"_all_7_passingAllFilters_allCalledraw_variants.sfs.out",sep=""),header=T,stringsAsFactors = F)
sfs$population <- pop
popcolor=colors[pop]
allSFS_list[[i]] <- sfs # add the SFS to your list
p <- ggplot(allSFS_list[[i]],aes(x=as.numeric(frequency),y=num_variants))+
geom_bar(stat="identity",fill=popcolor)+
scale_x_continuous(breaks=c(1,nrow(allSFS_list[[i]])))+
ggtitle(paste(pop,": Folded Neutral SFS",sep=""))+
theme_bw()+
facet_wrap(~population,scales="free_x")+
xlab("frequency")+
ylab("SNP Count")
allPlots_list[[i]]=p
ggsave(paste(plot.dir,pop,"_foldedNeutralSFS_counts.",todaysdate,".pdf",sep=""),p,device="pdf",width=5,height=7)
}
allSFS <- bind_rows(allSFS_list)
allPlots_list
do.call("grid.arrange",c(allPlots_list))
for(i in (1:length(pops))){
pop=pops[i]
sfs <- read.table(paste(data.dir,pop,"_all_7_passingAllFilters_allCalledraw_variants.sfs.out",sep=""),header=T,stringsAsFactors = F)
sfs$population <- pop
popcolor=colors[pop]
allSFS_list[[i]] <- sfs # add the SFS to your list
p <- ggplot(allSFS_list[[i]],aes(x=as.numeric(frequency),y=num_variants))+
geom_bar(stat="identity",fill=popcolor)+
scale_x_continuous(breaks=c(seq(1,nrow(allSFS_list[[i]]))))+
ggtitle(paste(pop,": Folded Neutral SFS",sep=""))+
theme_bw()+
facet_wrap(~population,scales="free_x")+
xlab("frequency")+
ylab("SNP Count")
allPlots_list[[i]]=p
ggsave(paste(plot.dir,pop,"_foldedNeutralSFS_counts.",todaysdate,".pdf",sep=""),p,device="pdf",width=5,height=7)
}
do.call("grid.arrange",c(allPlots_list))
allSFS_list=list()
allPlots_list=list()
# this is nice!
for(i in (1:length(pops))){
pop=pops[i]
sfs <- read.table(paste(data.dir,pop,"_all_7_passingAllFilters_allCalledraw_variants.sfs.out",sep=""),header=T,stringsAsFactors = F)
sfs$population <- pop
popcolor=colors[pop]
allSFS_list[[i]] <- sfs # add the SFS to your list
p <- ggplot(allSFS_list[[i]],aes(x=as.numeric(frequency),y=num_variants))+
geom_bar(stat="identity",fill=popcolor)+
scale_x_continuous(breaks=c(seq(1,nrow(allSFS_list[[i]]))))+
ggtitle(paste(pop,": Folded Neutral SFS",sep=""))+
theme_bw()+
facet_wrap(~population,scales="free_x")+
xlab("frequency")+
ylab("SNP Count")
allPlots_list[[i]]=p
ggsave(paste(plot.dir,pop,"_foldedNeutralSFS_counts.",todaysdate,".pdf",sep=""),p,device="pdf",width=7,height=5)
}
do.call("grid.arrange",c(allPlots_list))
calldate=20180806 # date gt's were called in format YYYYMMDD
todaysdate=format(Sys.Date(),format="%Y%m%d")
indir=paste("/Users/annabelbeichman/Documents/UCLA/Otters/OtterExomeProject/results/datafiles/snps_gds/",calldate,"/",sep="") # this is where your snp vcf file is and where you will save your gds file (downloaded from hoffman)
plotoutdir=paste("/Users/annabelbeichman/Documents/UCLA/Otters/OtterExomeProject/results/plots/Relatedness/",calldate,sep="")
fileoutdir=paste("/Users/annabelbeichman/Documents/UCLA/Otters/OtterExomeProject/results/analysisResults/Relatedness/",calldate,sep="")
dir.create(plotoutdir,recursive = T)
dir.create(fileoutdir,recursive = T)
genofile <- snpgdsOpen(paste(indir,"/snp_7_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.gds",sep=""))
snpset <- snpgdsLDpruning(genofile, ld.threshold=0.2,autosome.only = F)
head(snpset)
AK.ibd <- snpgdsIBDMoM(genofile, sample.id=AK.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2)
snpset.id <- unlist(snpset)
head(snpset.id)
popmap = read.table("/Users/annabelbeichman/Documents/UCLA/Otters/OtterExomeProject/information/samples/allSamples.Populations.txt",header=T)
head(popmap)
sample.id = as.character(popmap$Sample)
pop1_code = as.character(popmap$PrimaryPop)
pop2_code = as.character(popmap$SecondaryPop)
AK.id <- popmap[popmap$PrimaryPop == "Alaska",]$Sample
CA.id <- popmap[popmap$PrimaryPop == "California",]$Sample
KUR.id <- popmap[popmap$PrimaryPop == "Kuril",]$Sample
COM.id <- popmap[popmap$PrimaryPop == "Commander",]$Sample
AL.id <- popmap[popmap$PrimaryPop == "Aleutian",]$Sample
CA.id
AK.ibd <- snpgdsIBDMoM(genofile, sample.id=AK.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2)
genofile$id
snpset.id
get.attr.gdsn(genofile)
get.attr.gdsn(snpset)
genofile$sample.id
samp.id <- read.gdsn(index.gdsn(genofile, "sample.id"))
samp.id
AK.id <- popmap[popmap$PrimaryPop == "Alaska" & popmap$Sample %in% samp.id,]$Sample
length(AK.id)
AK.id <- popmap[popmap$PrimaryPop == "Alaska",]$Sample
length(AK.id)
AK.id <- popmap[popmap$PrimaryPop == "Alaska" & popmap$Sample %in% samp.id,]$Sample
CA.id <- popmap[popmap$PrimaryPop == "California" & popmap$Sample %in% samp.id,]$Sample
KUR.id <- popmap[popmap$PrimaryPop == "Kuril" & popmap$Sample %in% samp.id,]$Sample
COM.id <- popmap[popmap$PrimaryPop == "Commander" & popmap$Sample %in% samp.id,]$Sample
AL.id <- popmap[popmap$PrimaryPop == "Aleutian" & popmap$Sample %in% samp.id,]$Sample
AK.ibd <- snpgdsIBDMoM(genofile, sample.id=AK.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2)
AK.ibd <- snpgdsIBDMoM(genofile, sample.id=AK.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2)
AK.ibd <- snpgdsIBDMoM(genofile, sample.id=AK.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
AK.ibd.coeff <- snpgdsIBDSelection(AK.ibd)
head(AK.ibd.coeff)
plot(AK.ibd.coeff$k0, ibd.coeff$k1, xlim=c(0,1), ylim=c(0,1),
xlab="k0", ylab="k1", main="YRI samples (MoM)")
plot(AK.ibd.coeff$k0, AK.ibd.coeff$k1, xlim=c(0,1), ylim=c(0,1),
xlab="k0", ylab="k1", main="YRI samples (MoM)")
lines(c(0,1), c(1,0), col="red", lty=2)
head(AK.ibd.coeff)
ggplot(AK.ibd.coeff,aes(x=k0,y=k1,fill=kinship))+
geom_point()
ggplot(AK.ibd.coeff,aes(x=k0,y=k1,fill=kinship))+
geom_point()+
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits=c(0,1))
AK.ibd <- snpgdsIBDMoM(genofile, sample.id=AK.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
CA.ibd <- snpgdsIBDMoM(genofile, sample.id=CA.ibd, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
KUR.ibd <- snpgdsIBDMoM(genofile, sample.id=KUR.ibd, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
COM.ibd <- snpgdsIBDMoM(genofile, sample.id=COM.ibd, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
AK.ibd <- snpgdsIBDMoM(genofile, sample.id=AK.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
CA.ibd <- snpgdsIBDMoM(genofile, sample.id=CA.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
KUR.ibd <- snpgdsIBDMoM(genofile, sample.id=KUR.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
COM.ibd <- snpgdsIBDMoM(genofile, sample.id=COM.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
AL.ibd <- snpgdsIBDMoM(genofile, sample.id=AL.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
AK.ibd$population <- "Alaska"
CA.ibd$population <- "California"
KUR.ibd$population <- "Kuril"
KUR.ibd$population <- "Commander"
AL.ibd$population <- "Aleutian"
AK.ibd <- snpgdsIBDMoM(genofile, sample.id=AK.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
AK.ibd$population <- "Alaska"
CA.ibd <- snpgdsIBDMoM(genofile, sample.id=CA.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
CA.ibd$population <- "California"
KUR.ibd <- snpgdsIBDMoM(genofile, sample.id=KUR.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
KUR.ibd$population <- "Kuril"
COM.ibd <- snpgdsIBDMoM(genofile, sample.id=COM.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
KUR.ibd$population <- "Commander"
AL.ibd <- snpgdsIBDMoM(genofile, sample.id=AL.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
AL.ibd$population <- "Aleutian"
all.ibd.coeff <- rbind(AK.ibd,CA.ibd,COM.ibd,KUR.ibd,AL.ibd)
head(AK.ibd)
dim(AK.ibd)
AK.ibd <- snpgdsIBDMoM(genofile, sample.id=AK.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
CA.ibd <- snpgdsIBDMoM(genofile, sample.id=CA.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
KUR.ibd <- snpgdsIBDMoM(genofile, sample.id=KUR.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
COM.ibd <- snpgdsIBDMoM(genofile, sample.id=COM.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
AL.ibd <- snpgdsIBDMoM(genofile, sample.id=AL.id, snp.id=snpset.id,
maf=0.05, missing.rate=0.05, num.thread=2,autosome.only = F)
# Make a data.frame of them all
AK.ibd.coeff <- snpgdsIBDSelection(AK.ibd)
AK.ibd.coeff$population <- "Alaska"
CA.ibd.coeff <- snpgdsIBDSelection(CA.ibd)
CA.ibd.coeff$population <- "California"
KUR.ibd.coeff <- snpgdsIBDSelection(KUR.ibd)
KUR.ibd.coeff$population <- "Kuril"
COM.ibd.coeff <- snpgdsIBDSelection(COM.ibd)
COM.ibd.coeff$population <- "Commander"
AL.ibd.coeff <- snpgdsIBDSelection(AL.ibd)
AL.ibd.coeff$population <- "Aleutian"
all.ibd.coeff <- rbind(CA.ibd.coeff,AK.ibd.coeff,AL.ibd.coeff,COM.ibd.coeff,KUR.ibd.coeff)
ggplot(all.ibd.coeff,aes(x=k0,y=k1,fill=kinship))+
geom_point()+
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits=c(0,1))+
geom_vline(x=y)
ggplot(all.ibd.coeff,aes(x=k0,y=k1,fill=kinship))+
geom_point()+
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits=c(0,1))+
geom_vline()
ggplot(all.ibd.coeff,aes(x=k0,y=k1,fill=kinship))+
geom_point()+
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits=c(0,1))+
geom_vline(xintercept=0)
ggplot(all.ibd.coeff,aes(x=k0,y=k1,fill=kinship))+
geom_point()+
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits=c(0,1))+
geom_vline(xintercept=0,x=y)
ggplot(all.ibd.coeff,aes(x=k0,y=k1,fill=kinship))+
geom_point()+
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits=c(0,1))+
geom_abline(slope = 1)
ggplot(all.ibd.coeff,aes(x=k0,y=k1,fill=kinship))+
geom_point()+
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits=c(0,1))+
geom_abline(slope = 1,color="red")
ggplot(all.ibd.coeff,aes(x=k0,y=k1,fill=kinship))+
geom_point()+
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits=c(0,1))+
geom_abline(slope = 1,color="red",linetype="dashed")
ggplot(all.ibd.coeff,aes(x=k0,y=k1,fill=kinship))+
geom_point()+
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits=c(0,1))+
geom_abline(slope = -1,color="red",linetype="dashed")
ggplot(all.ibd.coeff,aes(x=k0,y=k1,fill=kinship))+
geom_point()+
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits=c(0,1))+
geom_abline(intercept = 1,slope = -1,color="red",linetype="dashed")
ggplot(all.ibd.coeff,aes(x=k0,y=k1,fill=kinship))+
geom_point()+
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits=c(0,1))+
geom_abline(intercept = 1,slope = -1,color="red",linetype="dashed")+
facet_wrap(~population)
ggplot(all.ibd.coeff,aes(x=k0,y=k1,fill=kinship))+
geom_point()+
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits=c(0,1))+
geom_abline(intercept = 1,slope = -1,color="red",linetype="dashed")+
facet_wrap(~population)+
theme_bw()
ggplot(all.ibd.coeff,aes(x=k0,y=k1,color=kinship))+
geom_point()+
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits=c(0,1))+
geom_abline(intercept = 1,slope = -1,color="red",linetype="dashed")+
facet_wrap(~population)+
theme_bw()
all.ibd.coeff$highKinship <- "no"
all.ibd.coeff[all.ibd.coeff$kinship > 0.2,]$highKinship <- "yes"
ggplot(all.ibd.coeff,aes(x=k0,y=k1,color=highKinship))+
geom_point()+
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits=c(0,1))+
geom_abline(intercept = 1,slope = -1,color="red",linetype="dashed")+
facet_wrap(~population)+
theme_bw()
all.ibd.coeff$KinshipGreaterThan0.2 <- "no"
all.ibd.coeff[all.ibd.coeff$kinship > 0.2,]$KinshipGreaterThan0.2 <- "yes"
ggplot(all.ibd.coeff,aes(x=k0,y=k1,color=KinshipGreaterThan0.2))+
geom_point()+
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits=c(0,1))+
geom_abline(intercept = 1,slope = -1,color="red",linetype="dashed")+
facet_wrap(~population)+
theme_bw()+
scale_color_manual(values=c("dodgerblue","orange"))
p0 <- ggplot(all.ibd.coeff,aes(x=k0,y=k1,color=KinshipGreaterThan0.2))+
geom_point()+
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits=c(0,1))+
geom_abline(intercept = 1,slope = -1,color="red",linetype="dashed")+
facet_wrap(~population)+
theme_bw()+
scale_color_manual(values=c("dodgerblue","orange"))
p0
ggsave(paste(plotoutdir,"/relatedness.PlinkMoM.allPops.",todaysdate,".pdf",sep=""),p0,device="pdf",width = 8,height=5)
write.table(all.ibd.coeff[all.ibd.coeff$KinshipGreaterThan0.2=="yes",],paste(fileoutdir,"/relatedness.plinkMoM.",todaysdate,".individualsKinshipGT0.2.txt"),quote=F,row.names = F)
write.table(all.ibd.coeff[all.ibd.coeff$KinshipGreaterThan0.2=="yes",],paste(fileoutdir,"/relatedness.plinkMoM.",todaysdate,".individualsKinshipGT0.2.txt",sep=""),quote=F,row.names = F)
View(all.ibd.coeff)
ibd.robust <- snpgdsIBDKING(genofile,autosome.only = F,remove.monosnp = T,missing.rate = 0.2, maf=0.05,snp.id=snpset.id) # removing monomorphing snps; adding ld pruning; this tightens it up a lot
names(ibd.robust)
snpgdsClose(genofile)
dat <- snpgdsIBDSelection(ibd.robust)
head(dat)
dat2 <- merge(dat,popmap,by.x="ID1",by.y="Sample")
dat3 <- merge(dat2,popmap,by.x = "ID2",by.y="Sample",suffixes = c("",".2"))
head(dat3)
dat3$match <- "different pops" # are ind 1 and ind 2 from same population, color green if so
dat3[dat3$PrimaryPop==dat3$PrimaryPop.2,]$match <- "same pop"
dat3$colorLabel <- "different pops"
dat3[dat3$match=="same pop",]$colorLabel <- as.character(dat3[dat3$match=="same pop",]$PrimaryPop)
p3a <- ggplot(data=dat3,aes(x=IBS0, y=kinship))+
geom_point(aes(color=colorLabel),alpha=0.3)+
xlab("Proportion of Zero IBS")+
ylab("Estimated Kinship Coefficient (KING-robust)")+
ggtitle(paste("King Relatedness Results based on ",as.character(length(ibd.robust$snp.id))," LD Pruned SNPs, maf cutoff (0.05), no monomorphic",sep=""))+
theme_bw()+
theme(legend.title = element_blank())
p3a
dat3[dat3$kinship>0.3,]
ggsave(paste(plotoutdir,"/relatedness.King.coloredByPop",todaysdate,".pdf",sep=""),p3a,device="pdf",width = 8,height=5)
p2
calldate=20180806 # date gt's were called in format YYYYMMDD
todaysdate=format(Sys.Date(),format="%Y%m%d")
# file locations:
indir=paste("/Users/annabelbeichman/Documents/UCLA/Otters/OtterExomeProject/results/datafiles/snps_gds/",calldate,"/",sep="") # this is where your snp vcf file is and where you will save your gds file (downloaded from hoffman)
plotoutdir=paste("/Users/annabelbeichman/Documents/UCLA/Otters/OtterExomeProject/results/plots/PCA/",calldate,"/",sep="")
fileoutdir=paste("/Users/annabelbeichman/Documents/UCLA/Otters/OtterExomeProject/results/analysisResults/PCA/",calldate,"/",sep="")
dir.create(plotoutdir,recursive = T)
dir.create(fileoutdir,recursive = T)
#open the gds file
genofile <- snpgdsOpen(paste(indir,"snp_7_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.gds",sep=""))
# 20180802: adding LD snp pruning: (1min); r2 threshold : 0.2; recommended by SNPRelate tutorial
# https://bioconductor.org/packages/devel/bioc/vignettes/SNPRelate/inst/doc/SNPRelateTutorial.html#ld-based-snp-pruning
snpset <- snpgdsLDpruning(genofile, ld.threshold=0.2,autosome.only = F)
# I double checked, and it doesn't exclude any chromosomes due to any 22 chr cutoffs. cool
head(snpset)
# Get all selected snp id
snpset.id <- unlist(snpset)
head(snpset.id)
#pca (fast)
sink(paste(fileoutdir,"/PCA.summary.",todaysdate,".txt",sep=""))
pca <- snpgdsPCA(genofile,snp.id=snpset.id,autosome.only = F, maf=0.06, missing.rate=0.2)
sink()
#variance proportion (%)
pc.percent <- pca$varprop*100
pc = head(round(pc.percent, 2))
pc
#population information
popmap = read.table("/Users/annabelbeichman/Documents/UCLA/Otters/OtterExomeProject/information/samples/allSamples.Populations.txt",header=T) # this includes the RWAB samples
head(popmap)
sample.id = as.character(popmap$Sample)
pop1_code = as.character(popmap$PrimaryPop)
pop2_code = as.character(popmap$SecondaryPop)
seq_code = as.character(popmap$sequencer)
# can add as many of these as you want
#make a data.frame
tab <- data.frame(sample.id = pca$sample.id, pop1 = factor(pop1_code)[match(pca$sample.id, sample.id)], pop2=factor(pop2_code)[match(pca$sample.id,sample.id)],sequencer=factor(seq_code)[match(pca$sample.id, sample.id)],EV1 = pca$eigenvect[,1], EV2 = pca$eigenvect[,2], stringsAsFactors = FALSE)
head(tab)
p1 <- ggplot(tab,aes(x=EV1,y=EV2,color=pop1,shape=sequencer))+
geom_point()+
theme_bw()+
ylab(paste("PC2 (", pc[2],"%)")) +
xlab(paste("PC1 (", pc[1],"%)"))+
ggtitle(paste("PCA based on ",as.character(length(pca$snp.id))," LD Pruned SNPs",sep=""))+
theme(legend.title = element_blank(),axis.text = element_text(size=14),axis.title = element_text(size=14),legend.text = element_text(size=14))+
scale_shape_manual(values=c(1,16))
p1
lbls <- paste("PC", 1:4, "\n", format(pc.percent[1:4], digit=2), "%", sep="")
pairs(pca$eigenvect[,1:4], col=tab$pop1,labels=lbls)
sub <- tab$sample.id[tab$pop1!="California"]
sink(paste(fileoutdir,"/PCA.record.excl.CA.",todaysdate,".txt",sep=""))
pca <- snpgdsPCA(genofile, snp.id=snpset.id,autosome.only = F, sample.id=sub, maf=0.06)
sink()
tab2 <- data.frame(sample.id = pca$sample.id, pop1 = factor(pop1_code)[match(pca$sample.id, sample.id)], pop2 = factor(pop2_code)[match(pca$sample.id, sample.id)],sequencer=factor(seq_code)[match(pca$sample.id, sample.id)],EV1 = pca$eigenvect[,1], EV2 = pca$eigenvect[,2], stringsAsFactors = FALSE)
p2 <- ggplot(tab2,aes(x=EV1,y=EV2,color=pop1,shape=sequencer))+
geom_point()+
theme_bw()+
ylab(paste("PC2 (", pc[2],"%)")) +
xlab(paste("PC1 (", pc[1],"%)"))+
theme(legend.title = element_blank(),axis.text = element_text(size=14),axis.title = element_text(size=14),legend.text = element_text(size=14))+
scale_shape_manual(values=c(1,16))+
ggtitle(paste("PCA based on ",as.character(length(pca$snp.id))," LD Pruned SNPs",sep=""))
p2
head(tab2)
p2 <- ggplot(tab2,aes(x=EV1,y=EV2,color=pop1,shape=sequencer,label=sample.id))+
geom_point()+
theme_bw()+
ylab(paste("PC2 (", pc[2],"%)")) +
xlab(paste("PC1 (", pc[1],"%)"))+
theme(legend.title = element_blank(),axis.text = element_text(size=14),axis.title = element_text(size=14),legend.text = element_text(size=14))+
scale_shape_manual(values=c(1,16))+
ggtitle(paste("PCA based on ",as.character(length(pca$snp.id))," LD Pruned SNPs",sep=""))+
geom_text(geom_text(aes(label=sample.id),hjust=0, vjust=0))
p2 <- ggplot(tab2,aes(x=EV1,y=EV2,color=pop1,shape=sequencer,label=sample.id))+
geom_point()+
theme_bw()+
ylab(paste("PC2 (", pc[2],"%)")) +
xlab(paste("PC1 (", pc[1],"%)"))+
theme(legend.title = element_blank(),axis.text = element_text(size=14),axis.title = element_text(size=14),legend.text = element_text(size=14))+
scale_shape_manual(values=c(1,16))+
ggtitle(paste("PCA based on ",as.character(length(pca$snp.id))," LD Pruned SNPs",sep=""))+
geom_text(aes(label=sample.id),hjust=0, vjust=0)
p2
p2 <- ggplot(tab2,aes(x=EV1,y=EV2,color=pop1,shape=sequencer,label=sample.id))+
geom_point()+
theme_bw()+
ylab(paste("PC2 (", pc[2],"%)")) +
xlab(paste("PC1 (", pc[1],"%)"))+
theme(legend.title = element_blank(),axis.text = element_text(size=14),axis.title = element_text(size=14),legend.text = element_text(size=14))+
scale_shape_manual(values=c(1,16))+
ggtitle(paste("PCA based on ",as.character(length(pca$snp.id))," LD Pruned SNPs",sep=""))+
geom_text(aes(label=tab2[tab2$population=="Kuril" | tab2$population=="Alaska"]sample.id),hjust=0, vjust=0)
p2 <- ggplot(tab2,aes(x=EV1,y=EV2,color=pop1,shape=sequencer,label=sample.id))+
geom_point()+
theme_bw()+
ylab(paste("PC2 (", pc[2],"%)")) +
xlab(paste("PC1 (", pc[1],"%)"))+
theme(legend.title = element_blank(),axis.text = element_text(size=14),axis.title = element_text(size=14),legend.text = element_text(size=14))+
scale_shape_manual(values=c(1,16))+
ggtitle(paste("PCA based on ",as.character(length(pca$snp.id))," LD Pruned SNPs",sep=""))+
geom_text(aes(label=tab2[tab2$population=="Kuril" | tab2$population=="Alaska",]sample.id),hjust=0, vjust=0)
p2 <- ggplot(tab2,aes(x=EV1,y=EV2,color=pop1,shape=sequencer,label=sample.id))+
geom_point()+
theme_bw()+
ylab(paste("PC2 (", pc[2],"%)")) +
xlab(paste("PC1 (", pc[1],"%)"))+
theme(legend.title = element_blank(),axis.text = element_text(size=14),axis.title = element_text(size=14),legend.text = element_text(size=14))+
scale_shape_manual(values=c(1,16))+
ggtitle(paste("PCA based on ",as.character(length(pca$snp.id))," LD Pruned SNPs",sep=""))+
geom_text(aes(label=tab2[tab2$population=="Kuril" | tab2$population=="Alaska",]s$ample.id),hjust=0, vjust=0)
p2 <- ggplot(tab2,aes(x=EV1,y=EV2,color=pop1,shape=sequencer,label=sample.id))+
geom_point()+
theme_bw()+
ylab(paste("PC2 (", pc[2],"%)")) +
xlab(paste("PC1 (", pc[1],"%)"))+
theme(legend.title = element_blank(),axis.text = element_text(size=14),axis.title = element_text(size=14),legend.text = element_text(size=14))+
scale_shape_manual(values=c(1,16))+
ggtitle(paste("PCA based on ",as.character(length(pca$snp.id))," LD Pruned SNPs",sep=""))+
geom_text(aes(label=tab2[tab2$population=="Kuril" | tab2$population=="Alaska",]$sample.id),hjust=0, vjust=0)
p2
require(ggrepel)
p2 <- ggplot(tab2,aes(x=EV1,y=EV2,color=pop1,shape=sequencer,label=sample.id))+
geom_point()+
theme_bw()+
ylab(paste("PC2 (", pc[2],"%)")) +
xlab(paste("PC1 (", pc[1],"%)"))+
theme(legend.title = element_blank(),axis.text = element_text(size=14),axis.title = element_text(size=14),legend.text = element_text(size=14))+
scale_shape_manual(values=c(1,16))+
ggtitle(paste("PCA based on ",as.character(length(pca$snp.id))," LD Pruned SNPs",sep=""))+
geom_text_repel(aes(label=sample.id),hjust=, vjust=0)
p2 <- ggplot(tab2,aes(x=EV1,y=EV2,color=pop1,shape=sequencer,label=sample.id))+
geom_point()+
theme_bw()+
ylab(paste("PC2 (", pc[2],"%)")) +
xlab(paste("PC1 (", pc[1],"%)"))+
theme(legend.title = element_blank(),axis.text = element_text(size=14),axis.title = element_text(size=14),legend.text = element_text(size=14))+
scale_shape_manual(values=c(1,16))+
ggtitle(paste("PCA based on ",as.character(length(pca$snp.id))," LD Pruned SNPs",sep=""))+
geom_text_repel(aes(label=sample.id))
p2
p3 <- ggplot(tab2,aes(x=EV1,y=EV2,color=pop1,shape=sequencer,label=sample.id))+
geom_point()+
theme_bw()+
ylab(paste("PC2 (", pc[2],"%)")) +
xlab(paste("PC1 (", pc[1],"%)"))+
theme(legend.title = element_blank(),axis.text = element_text(size=14),axis.title = element_text(size=14),legend.text = element_text(size=14))+
scale_shape_manual(values=c(1,16))+
ggtitle(paste("PCA based on ",as.character(length(pca$snp.id))," LD Pruned SNPs",sep=""))+
geom_text_repel(aes(label=sample.id))
p3
ggsave(paste(plotoutdir,"/PCA.excludeCA.LDPruned.withNames.",todaysdate,".pdf",sep=""),p3,device="pdf",width = 16,height=10)
p2 <- ggplot(tab2,aes(x=EV1,y=EV2,color=pop1,shape=sequencer,label=sample.id))+
geom_point()+
theme_bw()+
ylab(paste("PC2 (", pc[2],"%)")) +
xlab(paste("PC1 (", pc[1],"%)"))+
theme(legend.title = element_blank(),axis.text = element_text(size=14),axis.title = element_text(size=14),legend.text = element_text(size=14))+
scale_shape_manual(values=c(1,16))+
ggtitle(paste("PCA based on ",as.character(length(pca$snp.id))," LD Pruned SNPs",sep=""))
p2 <- ggplot(tab2,aes(x=EV1,y=EV2,color=pop1,shape=sequencer,label=sample.id))+
geom_point()+
theme_bw()+
ylab(paste("PC2 (", pc[2],"%)")) +
xlab(paste("PC1 (", pc[1],"%)"))+
theme(legend.title = element_blank(),axis.text = element_text(size=14),axis.title = element_text(size=14),legend.text = element_text(size=14))+
scale_shape_manual(values=c(1,16))+
ggtitle(paste("PCA based on ",as.character(length(pca$snp.id))," LD Pruned SNPs",sep=""))
p2
ggsave(paste(plotoutdir,"/PCA.excludeCA.LDPruned.",todaysdate,".pdf",sep=""),p2,device="pdf",width = 8,height=5)
wd=paste("/Users/annabelbeichman/Documents/UCLA/Otters/OtterExomeProject/results/analysisResults/FASTSTRUCTURE/",calldate,"/results",sep="")
require(rsvg)
for (i in seq(1,10)){
print(i)
svg1File <- paste(wd,calldate,"/plots/snp_7_downSampCOM_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.faststructure_plot",i,".svg",sep="")
rsvg_pdf(svg1File, paste(wd,calldate,"/plots/snp_7_downSampCOM_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.faststructure_plot",i,".pdf",sep=""))
}
# convert to PDF
for (i in seq(1,10)){
print(i)
svg1File <- paste(wd,"/plots/snp_7_downSampCOM_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.faststructure_plot",i,".svg",sep="")
rsvg_pdf(svg1File, paste(wd,"/plots/snp_7_downSampCOM_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.faststructure_plot",i,".pdf",sep=""))
}
paste(wd,"/plots/snp_7_downSampCOM_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.faststructure_plot",i,".svg",sep="")
wd=paste("/Users/annabelbeichman/Documents/UCLA/Otters/OtterExomeProject/results/analysisResults/FASTSTRUCTURE/",calldate,"/",sep="")
for (i in seq(1,10)){
print(i)
svg1File <- paste(wd,"/plots/snp_7_downSampCOM_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.faststructure_plot",i,".svg",sep="")
rsvg_pdf(svg1File, paste(wd,"/plots/snp_7_downSampCOM_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.faststructure_plot",i,".pdf",sep=""))
}
paste(wd,"/plots/snp_7_downSampCOM_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.faststructure_plot",i,".svg",sep="")
outdir=paste("/Users/annabelbeichman/Documents/UCLA/Otters/OtterExomeProject/plots//FASTSTRUCTURE/",calldate,"/",sep="")
dir.create(outdir)
outdir=paste("/Users/annabelbeichman/Documents/UCLA/Otters/OtterExomeProject/results/plots/FASTSTRUCTURE/",calldate,"/",sep="")
dir.create(outdir)
for (i in seq(1,10)){
print(i)
svg1File <- paste(wd,"/svg/snp_7_downSampCOM_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.faststructure_plot",i,".svg",sep="")
rsvg_pdf(svg1File, paste(outdir,"/plots/snp_7_downSampCOM_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.faststructure_plot",i,".pdf",sep=""))
}
paste(wd,"/svg/snp_7_downSampCOM_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.faststructure_plot",i,".svg",sep="")
for (i in seq(1,10)){
print(i)
svg1File <- paste(wd,"/svg/snp_7_downSampCOM_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.faststructure_plot.",i,".svg",sep="")
rsvg_pdf(svg1File, paste(outdir,"/plots/snp_7_downSampCOM_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.faststructure_plot.",i,".pdf",sep=""))
}
for (i in seq(1,10)){
print(i)
svg1File <- paste(wd,"/svg/snp_7_downSampCOM_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.faststructure_plot.",i,".svg",sep="")
rsvg_pdf(svg1File, paste(outdir,"/snp_7_downSampCOM_maxNoCallFrac_0.2_passingBespoke_passingAllFilters_postMerge_raw_variants.faststructure_plot.",i,".pdf",sep=""))
}
